"""
Django settings for snowctf project.

Generated by 'django-admin startproject' using Django 5.1.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
import os
import sys
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

sys.path.insert(0, os.path.join(BASE_DIR, 'apps'))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-)+vh#@l4crslu5fza1e8da!2(0s10mw5%_1=*uko7cu9ju*yv-'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv('SNOW_DEBUG', 'True').upper() == 'TRUE'

ALLOWED_HOSTS = ['*']

LOGIN_REDIRECT_URL = "/"

# Email setting
# 注册中邮件验证方法:“强制（mandatory）”,“可选（optional）【默认】”或“否（none）”之一。
# 开启邮箱验证的话，如果邮箱配置不可用会报错，所以默认关闭，根据需要自行开启
ACCOUNT_EMAIL_VERIFICATION = os.getenv('SNOW_ACCOUNT_EMAIL_VERIFICATION', 'none')
# 登录方式，选择用户名或者邮箱都能登录

# 设置用户注册的时候必须填写邮箱地址
ACCOUNT_EMAIL_REQUIRED = True  # 注册时必须填写邮箱
 # 邮箱验证方式
ACCOUNT_USERNAME_REQUIRED = True  # 注册时必须填写用户名
ACCOUNT_UNIQUE_EMAIL = True  # 邮箱唯一
ACCOUNT_DEFAULT_HTTP_PROTOCOL = os.getenv('SNOW_PROTOCOL_HTTPS', 'HTTP').lower()
# Application definition
ACCOUNT_LOGIN_METHODS = {'email', 'username'}

INSTALLED_APPS = [
    'simpleui', #后台美化
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    'django.contrib.sites',  # 必需
    'django.contrib.humanize',
    
    # allauth 相关应用
    'allauth',
    'allauth.account',
    'allauth.socialaccount',


    #自定义app
    'comment',
    'competition',
    'container',
    'easytask',
    'oauth',
    'public',
    'challenge',
    #自定义app结束

    'imagekit', #上传图片应用

    'crispy_forms',
    'crispy_bootstrap4',

    'haystack',

    'django_celery_results',  # celery结果
    'django_celery_beat', 
    
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',

    'allauth.account.middleware.AccountMiddleware',
    'apps.public.middleware.APIPermissionMiddleware',
]

CRISPY_ALLOWED_TEMPLATE_PACKS = "bootstrap4"
CRISPY_TEMPLATE_PACK = "bootstrap4"

ROOT_URLCONF = 'snowctf.urls'

LANGUAGE_CODE = 'zh-hans'

TIME_ZONE = 'Asia/Shanghai'

USE_TZ = False


# 容器相关设置
CONTAINER_EXPIRY_HOURS = float(os.getenv('CONTAINER_EXPIRY_HOURS', '2')) # 容器过期时间（小时）
# 是否需要调整时区（减去8小时）
CELERY_ADJUST_TIMEZONE = os.getenv('CELERY_ADJUST_TIMEZONE', 'True').upper() == 'TRUE'

SILENCED_SYSTEM_CHECKS = [
    'models.W036',  # 忽略 MySQL 不支持条件性唯一约束的警告
]

SIMPLEUI_HOME_TITLE = 'SnowCTF 管理系统'
SIMPLEUI_LOGO = 'https://www.secsnow.cn/static/blog/img/logo.svg' #自定义后台logo


SITE_ID = int(os.getenv('SITE_ID', '4'))
ACCOUNT_EMAIL_REQUIRED = True


TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',

                'public.context_processors.settings_info',
            ],
        },
    },
]

WSGI_APPLICATION = 'snowctf.wsgi.application'

AUTH_USER_MODEL = 'oauth.Ouser'

# *************************************** 静态文件配置开始 ***************************************
# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.10/howto/static-files/

# 静态文件收集
STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'static')

# 媒体文件收集
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
# *************************************** 静态文件配置结束 ***************************************

# *************************************** 数据库配置开始 ***************************************
# 配置数据库
snow_mysql_host = os.getenv('SNOW_MYSQL_HOST', '127.0.0.1')
snow_mysql_name = os.getenv('SNOW_MYSQL_NAME', 'snowctf')
snow_mysql_user = os.getenv('SNOW_MYSQL_USER', 'snowctf')
snow_mysql_pwd = os.getenv('SNOW_MYSQL_PASSWORD', 'rfFGr7aJmiSx3ewh')
snow_mysql_port = os.getenv('SNOW_MYSQL_PORT', 3306)

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',  # 修改数据库为MySQL，并进行配置
        'NAME': snow_mysql_name,  # 数据库的名称
        'USER': snow_mysql_user,  # 数据库的用户名
        'PASSWORD': snow_mysql_pwd,  # 数据库的密码
        'HOST': snow_mysql_host,
        'PORT': snow_mysql_port,
        'OPTIONS': {'charset': 'utf8mb4', 'use_unicode': True, 'connect_timeout': 30}
    }
}
# *************************************** 数据库配置结束 **************************************


# *************************************** 缓存配置开始 ***************************************
# 使用django-redis缓存页面，缓存配置如下：
snow_redis_host = os.getenv('SNOW_REDIS_HOST', '127.0.0.1')
snow_redis_port = os.getenv('SNOW_REDIS_PORT', 6379)

CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://{}:{}/0".format(snow_redis_host, snow_redis_port),
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        }
    }
}
# *************************************** 缓存配置结束 ***************************************

# *************************************** 搜索 ***************************************
HAYSTACK_CONNECTIONS = {
       'default': {
           'ENGINE': 'haystack.backends.whoosh_backend.WhooshEngine',  # 使用 Whoosh 后端
           'PATH': os.path.join(BASE_DIR, 'whoosh_index'),  # Whoosh 索引路径
       },
   }
# *************************************** 搜索 ***************************************






# *************************************** celery 配置开始 ***************************************
# 跟缓存的redis配置类似，使用不同的库就行
CELERY_BROKER_URL = "redis://{}:{}/1".format(snow_redis_host, snow_redis_port)
# 时区跟Django的一致
CELERY_TIMEZONE = TIME_ZONE
# 不使用utc，所以在定时任务里面的时间应该比上海时间少8小时，比如要设置本地16:00执行，那么应该在定时里面设置成8:00
CELERY_ENABLE_UTC = False
# 应对django在使用mysql的时候设置USE_TZ = False导致的报错
DJANGO_CELERY_BEAT_TZ_AWARE = False
# 支持数据库django-db和缓存django-cache存储任务状态及结果
CELERY_RESULT_BACKEND = "django-db"
CELERY_CACHE_BACKEND = 'django-cache'
# 将任务调度器设为DatabaseScheduler
CELERY_BEAT_SCHEDULER = 'django_celery_beat.schedulers:DatabaseScheduler'
# celery内容等消息的格式设置，默认json
CELERY_ACCEPT_CONTENT = ['application/json', ]
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
# 每个 worker 最多执行n个任务就会被销毁，可防止内存泄露
CELERY_WORKER_MAX_TASKS_PER_CHILD = 100
# 为存储结果设置过期日期，默认1天过期。如果beat开启，Celery每天会自动清除，0表示永不清理
# 这里可以设置成0，然后自己创建清理结果的机制，比较好控制
CELERY_RESULT_EXPIRES = 0
CELERY_BROKER_CONNECTION_RETRY = True
CELERY_BROKER_CONNECTION_RETRY_ON_STARTUP = True
# *************************************** celery 配置结束 ***************************************


# ****************************************** 邮箱配置开始 ****************************************
# 配置管理邮箱，服务出现故障会收到到邮件，环境变量值的格式：name|test@test.com 多组用户用英文逗号隔开
ADMINS = []
admin_email_user = os.getenv('SNOW_ADMIN_EMAIL_USER')
if admin_email_user:
    for each in admin_email_user.split(','):
        a_user, a_email = each.split('|')
        ADMINS.append((a_user, a_email))

# 邮箱配置
EMAIL_HOST = os.getenv('SNOW_EMAIL_HOST', '')
EMAIL_HOST_USER = os.getenv('SNOW_EMAIL_HOST_USER', '')
EMAIL_HOST_PASSWORD = os.getenv('SNOW_EMAIL_HOST_PASSWORD',
                                '')  # 这个不是邮箱密码，而是授权码
EMAIL_PORT = os.getenv('SNOW_EMAIL_PORT', 465)  # 由于阿里云的25端口打不开，所以必须使用SSL然后改用465端口
EMAIL_TIMEOUT = 5
# 是否使用了SSL 或者TLS，为了用465端口，要使用这个
EMAIL_USE_SSL = os.getenv('SNOW_EMAIL_USE_SSL', 'True').upper() == 'TRUE'
# 默认发件人，不设置的话django默认使用的webmaster@localhost，所以要设置成自己可用的邮箱
DEFAULT_FROM_EMAIL = os.getenv('SNOW_DEFAULT_FROM_EMAIL', 'SECSNOW<sec_snow@163.com>')
# *************************************** 邮箱配置结束 *******************************************


# ***************************************** 网站配置开始 ****************************************
# 网站默认设置和上下文信息
SITE_LOGO_NAME = os.getenv('SNOW_LOGO_NAME', 'SNOWCTF')
SITE_END_TITLE = os.getenv('SNOW_SITE_END_TITLE', 'SNOWCTF')
SITE_DESCRIPTION = os.getenv('SNOW_SITE_DESCRIPTION', 'SNOWCTF 一个开源、共创、共享CTF竞赛网站')
SITE_KEYWORDS = os.getenv('SNOW_SITE_KEYWORDS', 'secsnow,CTF竞赛、漏洞靶场、网络安全')

PROTOCOL_HTTPS = os.getenv('PROTOCOL_HTTPS', 'HTTP').lower()
# ***************************************** 网站配置结束 *****************************************
# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/




# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
