# Generated by Django 5.1.6 on 2025-02-26 16:18

import container.models
import django.core.validators
import django.db.models.deletion
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('challenge', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='DockerEngine',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='引擎名称')),
                ('host_type', models.CharField(choices=[('LOCAL', '本地模式'), ('REMOTE', '远程模式')], default='LOCAL', max_length=6, verbose_name='主机类型')),
                ('host', models.CharField(blank=True, default='localhost', max_length=200, null=True, verbose_name='主机地址')),
                ('port', models.IntegerField(blank=True, default=None, help_text='本地模式不需要填写', null=True, verbose_name='端口')),
                ('tls_enabled', models.BooleanField(default=False, help_text='本地模式不需要填写', verbose_name='启用TLS')),
                ('domain', models.CharField(blank=True, default=None, max_length=255, null=True, verbose_name='域名')),
                ('ca_cert', models.FileField(blank=True, null=True, upload_to=container.models.certificate_upload_path, validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['pem', 'crt'])], verbose_name='CA证书')),
                ('client_cert', models.FileField(blank=True, null=True, upload_to=container.models.certificate_upload_path, validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['pem', 'crt'])], verbose_name='客户端证书')),
                ('client_key', models.FileField(blank=True, null=True, upload_to=container.models.certificate_upload_path, validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['pem', 'key'])], verbose_name='客户端密钥')),
                ('memory_limit', models.IntegerField(verbose_name='内存限制(MB)')),
                ('cpu_limit', models.FloatField(verbose_name='CPU限制')),
                ('is_active', models.BooleanField(default=True, verbose_name='是否激活')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
            ],
            options={
                'verbose_name': 'Docker引擎',
                'verbose_name_plural': 'Docker引擎',
            },
        ),
        migrations.CreateModel(
            name='UserContainer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('challenge_uuid', models.UUIDField(default=uuid.uuid4, editable=False, verbose_name='挑战UUID')),
                ('container_id', models.CharField(max_length=64, verbose_name='容器ID')),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True, verbose_name='IP地址')),
                ('domain', models.CharField(blank=True, default=None, max_length=255, null=True, verbose_name='域名')),
                ('port', models.TextField(blank=True, null=True, verbose_name='端口')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('expires_at', models.DateTimeField(verbose_name='过期时间')),
                ('challenge', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='challenge.challenge', verbose_name='题目')),
                ('docker_engine', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='container.dockerengine', verbose_name='Docker引擎')),
            ],
            options={
                'verbose_name': '容器日志',
                'verbose_name_plural': '容器日志',
            },
        ),
    ]
