# Generated by Django 5.1.6 on 2025-02-26 16:18

import challenge.models
import django.core.validators
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Challenge',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True, verbose_name='唯一标识符')),
                ('title', models.CharField(max_length=255, verbose_name='题目标题')),
                ('description', models.TextField(verbose_name='题目描述')),
                ('category', models.CharField(choices=[('WEB', 'Web'), ('MISC', '杂项'), ('CRYPTO', '加密'), ('PWN', 'Pwn'), ('REV', '逆向'), ('IOT', 'IoT'), ('CVE', 'CVE复现'), ('签到', '签到'), ('OTHER', '其他')], default='WEB', max_length=20, verbose_name='题目类型')),
                ('difficulty', models.CharField(choices=[('Easy', '简单'), ('Medium', '中等'), ('Hard', '困难')], default='Medium', max_length=10, verbose_name='难度')),
                ('flag_type', models.CharField(choices=[('STATIC', '静态Flag'), ('DYNAMIC', '动态flag')], default='DYNAMIC', max_length=20, verbose_name='Flag类型')),
                ('initial_points', models.IntegerField(default=500, verbose_name='初始分数')),
                ('minimum_points', models.IntegerField(default=100, verbose_name='最低分数')),
                ('points', models.IntegerField(default=500, verbose_name='当前分数')),
                ('solves', models.IntegerField(default=0, verbose_name='解决次数')),
                ('flag_template', models.CharField(default='flag{{{uuid}_{prefix}_{hash}}}', help_text='用于生成动态Flag的模板', max_length=255, verbose_name='Flag模板')),
                ('deployment_type', models.CharField(choices=[('STATIC', '静态文件部署'), ('DOCKER', 'Docker镜像部署'), ('COMPOSE', 'Docker Compose部署')], default='STATIC', max_length=10, verbose_name='部署类型')),
                ('first_blood_time', models.DateTimeField(blank=True, null=True, verbose_name='首次解决时间')),
                ('hint', models.TextField(blank=True, null=True, verbose_name='提示')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
                ('is_active', models.BooleanField(default=True, verbose_name='是否激活')),
                ('is_practice', models.BooleanField(default=True, verbose_name='是否允许评论')),
                ('is_top', models.BooleanField(default=False, verbose_name='置顶')),
            ],
            options={
                'verbose_name': '题目',
                'verbose_name_plural': '题目',
            },
        ),
        migrations.CreateModel(
            name='DockerCompose',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='名称')),
                ('compose_type', models.CharField(choices=[('MANUAL', '在线编写'), ('FILE', '手动上传')], default='MANUAL', max_length=10, verbose_name='配置类型')),
                ('compose_content', models.TextField(blank=True, help_text='手动编写时填写docker-compose.yml的内容', null=True, verbose_name='Compose内容')),
                ('compose_file', models.FileField(blank=True, help_text='上传包含docker-compose.yml的zip文件', null=True, upload_to=challenge.models.challenge_file_upload_path, validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['zip'])], verbose_name='Compose文件')),
                ('parsed_compose', models.TextField(blank=True, help_text='从上传文件解析出的docker-compose.yml内容', null=True, verbose_name='解析后的Compose内容')),
                ('flag_script', models.TextField(blank=True, help_text="用于生成动态flag的shell命令，例如: sh /flag.sh {flag} 或 bash -c 'echo {flag} > /flag'", null=True, verbose_name='Flag脚本命令')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
            ],
            options={
                'verbose_name': 'DockerCompose配置',
                'verbose_name_plural': 'DockerCompose配置',
            },
        ),
        migrations.CreateModel(
            name='DockerImages',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='镜像名称')),
                ('url', models.CharField(max_length=255, verbose_name='Docker镜像URL')),
                ('ports', models.CharField(blank=True, help_text='输入多个端口，用英文逗号分隔，例如：80,443,8080', max_length=255, null=True, validators=[django.core.validators.RegexValidator(message='请输入用英文逗号分隔的端口号列表，例如：80,443,8080', regex='^\\d+(,\\d+)*$')], verbose_name='监听端口')),
                ('environment', models.TextField(blank=True, help_text="以JSON格式存储环境变量，例如：{'DB_HOST': 'localhost', 'DB_PORT': '3306'}", null=True, verbose_name='环境变量')),
                ('type', models.CharField(choices=[('WEB', 'Web服务'), ('DB', '数据库'), ('MISC', '杂项'), ('PWN', 'Pwn'), ('CRYPTO', '加密'), ('REVERSE', '逆向'), ('OTHER', '其他'), ('CVE', 'CVE复现')], default='OTHER', max_length=20, verbose_name='镜像类型')),
            ],
            options={
                'verbose_name': '单镜像配置',
                'verbose_name_plural': '单镜像配置',
            },
        ),
        migrations.CreateModel(
            name='StaticFile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='文件名称')),
                ('file', models.FileField(help_text='支持的压缩包格式：zip, rar, 7z, tar, gz', upload_to=challenge.models.challenge_file_upload_path, validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['zip', 'rar', '7z', 'tar', 'gz'])], verbose_name='静态文件')),
                ('description', models.TextField(blank=True, null=True, verbose_name='文件描述')),
                ('file_size', models.BigIntegerField(default=0, verbose_name='文件大小')),
                ('upload_time', models.DateTimeField(auto_now_add=True, verbose_name='上传时间')),
                ('download_count', models.IntegerField(default=0, verbose_name='下载次数')),
            ],
            options={
                'verbose_name': '题目附件管理',
                'verbose_name_plural': '题目附件管理',
            },
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=20, unique=True, verbose_name='文章标签')),
                ('description', models.TextField(default='标签描述', help_text='用来作为SEO中description,长度参考SEO标准', max_length=240, verbose_name='描述')),
            ],
            options={
                'verbose_name': '标签',
                'verbose_name_plural': '标签',
                'ordering': ['id'],
            },
        ),
    ]
